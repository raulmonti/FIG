##==============================================================================
##
##  CMakeLists.txt
##	
##	Copyleft 2015-
##	Authors:
##  * Carlos E. Budde <cbudde@famaf.unc.edu.ar> (Universidad Nacional de Córdoba)
##  * Raul E. Monti <raulmonti88@gmail.com> (Universidad Nacional de Córdoba)
##
##------------------------------------------------------------------------------
##
##  This file is part of FIG.
##
##  The Finite Improbability Generator (FIG) project is free software;
##  you can redistribute it and/or modify it under the terms of the GNU
##  General Public License as published by the Free Software Foundation;
##  either version 3 of the License, or (at your option) any later version.
##
##  FIG is distributed in the hope that it will be useful,
##	but WITHOUT ANY WARRANTY; without even the implied warranty of
##	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##	GNU General Public License for more details.
##	
##	You should have received a copy of the GNU General Public License
##	along with FIG; if not, write to the Free Software Foundation,
##	Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
##==============================================================================

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)

PROJECT (fig)

SET(fig_VERSION_MAJOR 1)
SET(fig_VERSION_MINOR 1)

STRING(TIMESTAMP CURRENT_TIME "%H:%M:%S %d.%m.%Y")


 
###  Build meta options  ######################################################

OPTION(RELEASE     "Build release version of FIG"           OFF)
OPTION(BUILTIN_RNG "Use the PCG RNG provided with FIG"      OFF)
OPTION(USE_DTIME   "Double fp precision for time tracking"  OFF)
OPTION(PROFILING   "-g and -pg options for profiling."      OFF)

IF(RELEASE)
	MESSAGE("\nBuilding FIG in *** RELEASE mode ***")
	SET(fig_BUILD_TYPE "release")
#	SET(fig_CURRENT_BUILD "${CURRENT_TIME} (${fig_BUILD_TYPE})")
ELSE()
	MESSAGE("\nBuilding FIG in *** DEBUG mode ***")
	SET(fig_BUILD_TYPE "debug")
#	SET(fig_CURRENT_BUILD "${CURRENT_TIME} (debug)")
ENDIF()
SET(fig_CURRENT_BUILD "${CURRENT_TIME} (${fig_BUILD_TYPE})")

 

###  Project directory structure  #############################################

# Default directories configuration
SET(SOURCES_DIR ${PROJECT_SOURCE_DIR}/src)
SET(HEADERS_DIR ${PROJECT_SOURCE_DIR}/include)
SET(LIBRARIES_DIR ${PROJECT_SOURCE_DIR}/lib)
SET(PROJECT_BINARY_DIR ${PROJECT_SOURCE_DIR}/bin/.cmake_fig)
SET(RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/..)

# Allow subdirectories to append their files and dirs (https://goo.gl/xxIOAM)
SET(HEADERS_DIR ${HEADERS_DIR} CACHE INTERNAL "")
SET(ALL_SOURCES ${SOURCES_DIR} CACHE INTERNAL "")

# Header file with CMake settings for the source code
CONFIGURE_FILE("${SOURCES_DIR}/FigConfig.h.in" "${HEADERS_DIR}/FigConfig.h")

# Add external code subdirectories
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/ext ${PROJECT_BINARY_DIR}/../ext)
 
# Register all include paths found
INCLUDE_DIRECTORIES(${HEADERS_DIR})

# Register all source files found
AUX_SOURCE_DIRECTORY(${SOURCES_DIR} MAIN_SOURCE_FILES)
SET(ALL_SOURCES ${ALL_SOURCES} ${MAIN_SOURCE_FILES} CACHE INTERNAL "")

# Parser and lexer claim to have their own fs structure
SET(PARSER_DIR "${PROJECT_SOURCE_DIR}")
SET(PARSER_SRC "${PARSER_DIR}/src")      # sources
SET(PARSER_GEN "${PARSER_DIR}/src")      # templates
SET(PARSER_INC "${PARSER_DIR}/include")  # headers
SET(LEXER_TEMPLATE "${PARSER_GEN}/ModelScannerGen.ll")  # lexer template
SET(PARSER_TEMPLATE "${PARSER_GEN}/ModelParserGen.yy")  # parser template

# Source code files to be generated by flex and bison
SET(LEXER_CODE "${PARSER_SRC}/ModelScanner.cpp")
SET(PARSER_CODE "${PARSER_SRC}/ModelParser.cpp")



###  Preprocessor macros  #####################################################

# Build type: debug vs. release
IF(RELEASE)
	ADD_DEFINITIONS(-DNDEBUG)           # General No-Debug
	ADD_DEFINITIONS(-DNRANGECHK)        # Don't check ranges every f***ing time
	ADD_DEFINITIONS(-DRANDOM_RNG_SEED)  # Use random RNG seed by default
ENDIF()

# RNG algorithm: C++ STL Mersenne-Twister vs. PCG default
IF(BUILTIN_RNG)
	MESSAGE("Using builtin RNG from the PCG family")
	ADD_DEFINITIONS(-DPCG_RNG)  # PCG family RNG (http://www.pcg-random.org/)
ELSE()
	MESSAGE("Using C++ STL's Mersenne-Twister RNG")
ENDIF()

# Time fp precision: single vs. double
IF(USE_DTIME)
	MESSAGE("Time tracked with double fp precision")
	ADD_DEFINITIONS(-DDOUBLE_TIME_PRECISION)
ELSE()
	MESSAGE("Time tracked with single fp precision")
ENDIF()



###  Compiler configuration  ##################################################
 
# Only GCC and Clang are supported at the moment
OPTION(COMPILER_IS_CLANG "Using LLVM compiler collection (clang)" OFF)
OPTION(COMPILER_IS_GCC   "Using GNU compiler collection (gcc)"    OFF)
STRING(TOLOWER "${CMAKE_CXX_COMPILER_ID}" COMPILER_USED)
IF(COMPILER_USED MATCHES "clang")
	SET(COMPILER_IS_CLANG ON)
ELSEIF(COMPILER_USED MATCHES "gnu")
	SET(COMPILER_IS_GCC ON)
ELSE()
	MESSAGE(FATAL_ERROR "Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}\n")
ENDIF()

# If Clang was chosen check for compatible version
IF(COMPILER_IS_CLANG)
	SET(CLANG_VERSION_REQUIRED 3.7)
	IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS CLANG_VERSION_REQUIRED)
		MESSAGE(FATAL_ERROR
			"Clang compiler version too old (${CMAKE_CXX_COMPILER_VERSION})"
			" -- ${CMAKE_C_COMPILER} ${CLANG_VERSION_REQUIRED} or greater "
			"is required.")
	ENDIF()
ENDIF()
MESSAGE("Using ${CMAKE_CXX_COMPILER_ID} compiler "
	    "version ${CMAKE_CXX_COMPILER_VERSION}\n")

# Demand support for c++11 standard
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
IF(COMPILER_SUPPORTS_CXX11)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSE()
	MESSAGE(FATAL_ERROR "Compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
ENDIF()


 
###  Compile flags  ###########################################################

# Build type: release vs. debug
IF(RELEASE)
	# As much automatic optimization as we can get
	IF(COMPILER_IS_GCC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 --fast-math -march=native")
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
	ENDIF()
	## # Auto vectorization  (not yet proved efficient)
	## SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftree-vectorize")
ELSE()
	# Optimize without obfuscating the assembly so much
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O1")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")
	# Highly defensive compile flags
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")
	# Add debug info (used by gdb and pals)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
	# Stop compiling after *one* error
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfatal-errors")
ENDIF()

IF(PROFILING)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -pg")
ENDIF()

# OpenMP
IF(COMPILER_IS_CLANG)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp=libgomp")
ELSEIF(COMPILER_IS_GCC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
ENDIF()
## # Clang needs to be told where to look for OpenMP headers
## IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
##	FIND_PACKAGE(OpenMP REQUIRED)  # doesn't work
## 	EXECUTE_PROCESS(COMMAND find /usr/lib/ -name "omp.h"
## 	                COMMAND tail -n 1
## 	                COMMAND xargs dirname
## 	                OUTPUT_VARIABLE LATEST_OMP_H_DIR)
## 	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${LATEST_OMP_H_DIR}")
## ENDIF()
## That's not working!
## A special version of Clang with OpenMP activated seems to be required.
## ...pasted gcc's "omp.h" into ext/openmp/include

# Turn some warnings off
IF(COMPILER_IS_CLANG)
	# From MuParser-2.2.5 library -- http://muparser.beltoforion.de/:
	# "anonymous types declared in an anonymous union"
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nested-anon-types")
	# From flex generated file "lex.yy.cc":
	# 'register' storage class specifier is deprecated
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-register")
	# Avoid warnings due to known unused function
	SET_SOURCE_FILES_PROPERTIES(${SOURCES_DIR}/ModelBuilder.cpp
	                            PROPERTIES COMPILE_FLAGS -Wno-unused-function)
	SET_SOURCE_FILES_PROPERTIES(${SOURCES_DIR}/ModelTC.cpp
	                            PROPERTIES COMPILE_FLAGS -Wno-unused-function)
ELSEIF(COMPILER_IS_GCC AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)
	# From jsoncpp 1.7.4: this statement may fall through
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wimplicit-fallthrough=0")
ENDIF()
# From MuParser-2.2.5 library -- http://muparser.beltoforion.de/:
# "auto_ptr is deprecated" (TODO: update library ourselves?)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
# Debug mode has some known harmless warnings: turn these off
IF(NOT RELEASE)
	# From Z3 library "check_context()" and others: "unused parameter 'a'"...
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
	# Avoid warnings in flex 2.6.1 (previous versions do not have that warning)
	SET_SOURCE_FILES_PROPERTIES(${LEXER_CODE}
	                            PROPERTIES COMPILE_FLAGS -Wno-sign-compare)
	# Avoid warnings due to deprecated function
	SET_SOURCE_FILES_PROPERTIES(${SOURCES_DIR}/ConfidenceInterval.cpp
	                            PROPERTIES COMPILE_FLAGS -Wno-unused-function)
	# Avoid warnings due to decltype() in static function header
	SET_SOURCE_FILES_PROPERTIES(${HEADERS_DIR}/TraialPool.h
	                            PROPERTIES COMPILE_FLAGS -Wno-ignored-qualifiers)
ENDIF()



###  CMake packages and dynamic libraries  ####################################

# Unix lexer generator "flex"
FIND_PACKAGE(FLEX REQUIRED)

# Unix parser generator "bison"
FIND_PACKAGE(BISON REQUIRED)

# Favour project-local library paths
SET(CMAKE_LIBRARY_PATH ${PROJECT_SOURCE_DIR}/lib ${CMAKE_LIBRARY_PATH})

# Microsoft Research's SMT solver
FIND_LIBRARY(Z3 NAMES z3)
IF(NOT Z3)
  MESSAGE (FATAL_ERROR "z3 library not found!")
ENDIF()

# Include in a single variable all dynamic libraries to link against
LIST(APPEND DYNAMIC_LIBRARIES ${Z3})



###  Linker flags  ############################################################

# GNU pthreads
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -pthread" )

# OpenMP
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -fopenmp" )



###  Build executable  ########################################################

# Generate lexer code
ADD_CUSTOM_COMMAND(
  OUTPUT ${LEXER_CODE}
  COMMAND flex -o ${LEXER_CODE} ${LEXER_TEMPLATE}
  DEPENDS ${LEXER_TEMPLATE}
  )

# Generate parser code
ADD_CUSTOM_COMMAND(
  OUTPUT ${PARSER_CODE}
  COMMAND bison -d -o ${PARSER_CODE} ${PARSER_TEMPLATE}
  COMMAND mv "${PARSER_SRC}/*.hh"  "${PARSER_INC}"
  COMMAND mv "${PARSER_SRC}/*.hpp" "${PARSER_INC}"
  DEPENDS ${PARSER_TEMPLATE}
  )

# Add sources generated by Bison and Flex
SET (ALL_SOURCES ${ALL_SOURCES} ${PARSER_CODE} ${LEXER_CODE})

# Build executable
ADD_EXECUTABLE(fig ${ALL_SOURCES})



###  Link dynamic libraries  ##################################################

TARGET_LINK_LIBRARIES(fig ${DYNAMIC_LIBRARIES})
#TARGET_LINK_LIBRARIES(fig -static-libgcc -static-libstdc++ ${DYNAMIC_LIBRARIES})

