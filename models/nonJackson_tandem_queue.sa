/*
 * Tandem queue for the FIG tool
 * Budde, Monti, D'Argenio | 2016
 *
 * {-
 * Non-Jackson tandem queue concept:
 *
 *   'P0'           (q1)   'P1'      (q2)   'P2'
 * ------------> [..@@@@] ------> [....@@] ------>
 *  p:l1,1-p:l2             mu1              mu2
 *
 * Both queues (q1 and q2) have finite capacity 'c'
 * New packets arrive at q1 following an hyperexponential-2 distribution:
 *  - with probability   'p' they arrive at rate l1
 *  - with probability 1-'p' they arrive at rate l2
 * Packets in q1 are served at rate mu1 (exponential distribution) and sent to q2
 * Packets in q2 are served at rate mu2 (exponential distribution) and leave
 * 
 * Rare events: q2 reaching its maximum capacity 'c'
 * Stopping events (for transient analysis): q2 becoming empty
 * Initial state: q1=0, q2=1
 * 
 * NOTE: for the event to be rare and interesting
 *       it is important that the first queue be the bottleneck,
 *       i.e. mu1 < mu2 ("the second queue serves packets faster")
 * -}
 */

const int c = 8;       // Typical queue capacities: 8, 10, 12, 14, 16, 20, 25
const float  p = 0.5;  // probability of arrival with rate l1
const float l1 = 3;    // rate(--> q1           ) first  possibility 
const float l2 = 6;    // rate(--> q1           ) second possibility 
const int  mu1 = 2;    // rate(    q1 --> q2    )
const int  mu2 = 6;    // rate(           q2 -->)

module Arrivals
        clk0: clock;  // External arrivals ~ Exponential(lambda)
        [P0!] @ clk0 -> (clk0'= hyperexponential2(p,l1,l2));
endmodule

module Queue1
        q1: [0..c];
        clk1: clock;  // Queue1 processing ~ Exponential(mu1)
        // Packet arrival
        [P0?] q1 == 0          -> (q1'= q1+1) & (clk1'= exponential(mu1));
        [P0?] q1  > 0 & q1 < c -> (q1'= q1+1);
        [P0?] q1 == c          -> ;
        // Packet processing
        [P1!] q1 == 1 @ clk1 -> (q1'= q1-1);
        [P1!] q1  > 1 @ clk1 -> (q1'= q1-1) & (clk1'= exponential(mu1));
endmodule

module Queue2
        q2: [0..c] init 1;
        clk2: clock;  // Queue2 processing ~ Exponential(mu2)
        // Packet arrival
        [P1?] q2 == 0          -> (q2'= q2+1) & (clk2'= exponential(mu2));
        [P1?] q2  > 0 & q2 < c -> (q2'= q2+1);
        [P1?] q2 == c          -> ;
        // Packet processing
        [P2!] q2 == 1 @ clk2 -> (q2'= q2-1);
        [P2!] q2  > 1 @ clk2 -> (q2'= q2-1) & (clk2'= exponential(mu2));
endmodule


properties
	S( q2 == c )              // "rate"
	S[ 60:30000 ]( q2 == c )  // "rate with time-bound"
//	P( q2 > 0 U q2 == c )     // "transient"
endproperties

